import {ContractSendMethod} from 'web3-eth-contract';
import {ContractCallMethod} from '@methods/contract-call-method';

export interface NetworkMethods {
  COUNCIL_AMOUNT(): ContractCallMethod<number>;
  _governor(): ContractCallMethod<string>;
  _proposedGovernor(): ContractCallMethod<string>;
  claimGovernor(): ContractSendMethod;
  closedIdsCount(): ContractCallMethod<number>;
  disputableTime(): ContractCallMethod<number>;
  disputesForMergeByAddress(issueId: number, proposalId: number, address: string): ContractCallMethod<number>;
  incrementIssueID(): ContractCallMethod<number>;
  issues(v1: number): ContractCallMethod<{'0': number; '1': string; '2': number; '3': number; '4': string; '5': number; '6': boolean; '7': boolean; '8': boolean}>;
  issuesCIDtoID(v1: string): ContractCallMethod<number>;
  mergeCreatorFeeShare(): ContractCallMethod<number>;
  myIssues(v1: string, v2: number): ContractCallMethod<number>;
  oraclers(v1: string): ContractCallMethod<{'0': number; '1': number}>;
  oraclersArray(v1: number): ContractCallMethod<string>;
  oraclesStaked(): ContractCallMethod<number>;
  paused(): ContractCallMethod<boolean>;
  percentageNeededForDispute(): ContractCallMethod<number>;
  proposeGovernor(proposedGovernor: string): ContractSendMethod;
  redeemTime(): ContractCallMethod<number>;
  settlerToken(): ContractCallMethod<string>;
  totalStaked(): ContractCallMethod<number>;
  transactionToken(): ContractCallMethod<string>;
  lock(_tokenAmount: string | number): ContractSendMethod;
  unlock(_tokenAmount: string | number, _from: string): ContractSendMethod;
  delegateOracles(_tokenAmount: string | number, _delegatedTo: string): ContractSendMethod;
  disputeMerge(_issueID: number, _mergeID: number): ContractSendMethod;
  isIssueInDraft(_issueID: number): ContractCallMethod<boolean>;
  isMergeInDraft(_issueID: number, _mergeID: number): ContractCallMethod<boolean>;
  isMergeDisputed(_issueID: number, _mergeID: number): ContractCallMethod<boolean>;
  openIssue(_cid: string, _tokenAmount: string | number): ContractSendMethod;
  recognizeAsFinished(_issueId: number): ContractSendMethod;
  redeemIssue(_issueId: number): ContractSendMethod;
  updateIssue(_issueId: number, _newTokenAmount: string | number): ContractSendMethod;
  proposeIssueMerge(_issueID: number, _prAddresses: string[], _prAmounts: string[] | number[]): ContractSendMethod;
  closeIssue(_issueID: number, _mergeID: number): ContractSendMethod;
  getIssuesByAddress(_address: string): ContractCallMethod<number[]>;
  getOraclesByAddress(_address: string): ContractCallMethod<number>;
  getOraclesSummary(_address: string): ContractCallMethod<{'0': number; '1': number[]; '2': string[]; '3': number}>;
  getIssueByCID(_issueCID: string): ContractCallMethod<{'0': number; '1': string; '2': number; '3': number; '4': string; '5': number; '6': boolean; '7': boolean; '8': boolean}>;
  getIssueById(_issueID: number): ContractCallMethod<{'0': number; '1': string; '2': number; '3': number; '4': string; '5': number; '6': boolean; '7': boolean; '8': boolean}>;
  getMergeById(_issueID: number, _mergeId: number): ContractCallMethod<{'0': number; '1': number; '2': number; '3': string[]; '4': number[]; '5': string}>;
  changeMergeCreatorFeeShare(_mergeCreatorFeeShare: number): ContractSendMethod;
  changePercentageNeededForDispute(_percentageNeededForDispute: number): ContractSendMethod;
  changeDisputableTime(_disputableTime: number): ContractSendMethod;
  changeRedeemTime(_redeemTime: number): ContractSendMethod;
  changeCOUNCIL_AMOUNT(_COUNCIL_AMOUNT: string | number): ContractSendMethod;
}
