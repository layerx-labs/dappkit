import {ContractSendMethod} from 'web3-eth-contract';
import {ContractCallMethod} from '@methods/contract-call-method';

export interface RealFevrOpenerMethods {
  _closed() :ContractCallMethod<boolean>;
  _openedPacks() :ContractCallMethod<number>;
  _purchaseToken() :ContractCallMethod<string>;
  _realFvrTokenPriceUSD() :ContractCallMethod<number>;
  alreadyMinted(v1: number) :ContractCallMethod<boolean>;
  approve(to: string, tokenId: number) :ContractSendMethod;
  balanceOf(owner: string) :ContractCallMethod<number>;
  baseURI() :ContractCallMethod<string>;
  getApproved(tokenId: number) :ContractCallMethod<string>;
  isApprovedForAll(owner: string, operator: string) :ContractCallMethod<boolean>;
  lastNFTID() :ContractCallMethod<number>;
  name() :ContractCallMethod<string>;
  owner() :ContractCallMethod<string>;
  ownerOf(tokenId: number) :ContractCallMethod<string>;
  packIncrementId() :ContractCallMethod<number>;
  packs(v1: number) :ContractCallMethod<{'0': number; '1': number; '2': number; '3': number; '4': number; '5': number; '6': string; '7': string; '8': string; '9': string}>;
  registeredIDs(v1: string, v2: number) :ContractCallMethod<boolean>;
  registeredIDsArray(v1: string, v2: number) :ContractCallMethod<number>;
  safeTransferFrom(from: string, to: string, tokenId: number) :ContractSendMethod;
  safeTransferFrom(from: string, to: string, tokenId: number, _data?: string) :ContractSendMethod;
  setApprovalForAll(operator: string, approved: boolean) :ContractSendMethod;
  supportsInterface(interfaceId: string) :ContractCallMethod<boolean>;
  symbol() :ContractCallMethod<string>;
  tokenByIndex(index: number) :ContractCallMethod<number>;
  tokenOfOwnerByIndex(owner: string, index: number) :ContractCallMethod<number>;
  tokenURI(tokenId: number) :ContractCallMethod<string>;
  totalSupply() :ContractCallMethod<number>;
  transferFrom(from: string, to: string, tokenId: number) :ContractSendMethod;
  transferOwnership(newOwner: string) :ContractSendMethod;
  setTokenURI(tokenId: number, uri: string) :ContractSendMethod;
  setBaseURI(baseURI: string) :ContractSendMethod;
  exists(tokenId: number) :ContractCallMethod<boolean>;
  getRegisteredIDs(_address: string) :ContractCallMethod<number[]>;
  getMarketplaceDistributionForERC721(tokenId: number) :any;
  getPurchaseToken() :ContractCallMethod<string>;
  getTokenWorthof1USD() :number;
  getPackbyId(_packId: number) :ContractCallMethod<{'0': number; '1': number; '2': number; '3': string; '4': string; '5': string; '6': string; '7': string[]; '8': number[]; '9': boolean}>;
  getPackPriceInFVR(packId: number) :ContractCallMethod<number>;
  buyPack(packId: number) :ContractSendMethod;
  buyPacks(packIds: number[]) :ContractSendMethod;
  openPack(packId: number) :ContractSendMethod;
  openPacks(packIds: number[]) :ContractSendMethod;
  createPack(nftAmount: number, price: string | number, serie: string, packType: string, drop: string, saleStart: number, saleDistributionAddresses: string[], saleDistributionAmounts: number[], marketplaceDistributionAddresses: string[], marketplaceDistributionAmounts: number[]) :ContractSendMethod;
  offerPack(packId: number, receivingAddress: string) :ContractSendMethod;
  editPackInfo(_packId: number, _saleStart: number, serie: string, packType: string, drop: string, price: string | number) :ContractSendMethod;
  deletePackById(packId: number) :ContractSendMethod;
  mint(tokenIdToMint: number) :ContractSendMethod;
  setPurchaseTokenAddress(purchaseToken: string) :ContractSendMethod;
  setTokenPriceInUSD(newPrice: number) :ContractSendMethod;
  lock() :ContractSendMethod;
  unlock() :ContractSendMethod;
}
